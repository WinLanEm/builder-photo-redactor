Канал событий — паттерн, который создаёт механизм подписки, позволяющий одним объектам
следить и реагировать на события, происходящие в других объектах.
Выбрал именно паттерн канал событий в угоду observer, потому что для конкретной задачи этот паттерн
показывает себя лучше (хотя может просто я столкнулся с неправильной реализацией observer в ресурсах)
Клиенский файл - notify.php
Алгоритм проектирования:
Создаем интерфейс самого канала, который будет слушать события в нем прописываем методы подписки и событий
Создаем сам класс канала в нем общий массив (пока мы не работает с бд) в котором будут хранится наши подписчики
и то на какие события они подписаны
Проектируем реализуем subscribe, в массиве topics создаем подписчика с ключом нужного ему события
Реализуем publish - это метод, которые будет вызываться при создании нового события (например)
и в нем проверяем есть ли событие в topics, если оно есть, то вызываем метод подписчиков на это событие
Проектируем класс подписчиков в нем главное тот единый метод, который вызывается при событии
Проектируем класс поставщиков при его инициализации заправшивается название topic и нужный канал событий
(Очевидно каналов событий может быть множество для разных задач)
В нем проектируем метод publish, который будет вызываться при событии, в нем вызываем у конкретного канала
событий одноименный метод
После проектируем интерфейсы для постовщика и подписчика, в них указываем метод publish и метод вызываемый при событии
Последнее что сделано в моем примере это фейковый job, в котором показывается логика подписок, регистрации поставщиков
Инициализации канала и выкладке новых событий
